//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 13 colors.
  public struct color {
    /// Color `c000000`.
    public static let c000000 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c000000")
    /// Color `c007AFF`.
    public static let c007AFF = Rswift.ColorResource(bundle: R.hostingBundle, name: "c007AFF")
    /// Color `c275A53`.
    public static let c275A53 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c275A53")
    /// Color `c34C759`.
    public static let c34C759 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c34C759")
    /// Color `c8E8E93`.
    public static let c8E8E93 = Rswift.ColorResource(bundle: R.hostingBundle, name: "c8E8E93")
    /// Color `cCE4834`.
    public static let cCE4834 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cCE4834")
    /// Color `cD5D5D5`.
    public static let cD5D5D5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cD5D5D5")
    /// Color `cE14B34`.
    public static let cE14B34 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cE14B34")
    /// Color `cF6C66D`.
    public static let cF6C66D = Rswift.ColorResource(bundle: R.hostingBundle, name: "cF6C66D")
    /// Color `cF6F0E5`.
    public static let cF6F0E5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cF6F0E5")
    /// Color `cFF3A2F`.
    public static let cFF3A2F = Rswift.ColorResource(bundle: R.hostingBundle, name: "cFF3A2F")
    /// Color `cFFCC00`.
    public static let cFFCC00 = Rswift.ColorResource(bundle: R.hostingBundle, name: "cFFCC00")
    /// Color `cFFFFFF`.
    public static let cFFFFFF = Rswift.ColorResource(bundle: R.hostingBundle, name: "cFFFFFF")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c000000", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func c000000(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c000000, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c007AFF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func c007AFF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c007AFF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c275A53", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func c275A53(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c275A53, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c34C759", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func c34C759(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c34C759, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c8E8E93", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func c8E8E93(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c8E8E93, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cCE4834", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cCE4834(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cCE4834, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cD5D5D5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cD5D5D5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cD5D5D5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cE14B34", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cE14B34(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cE14B34, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cF6C66D", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cF6C66D(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cF6C66D, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cF6F0E5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cF6F0E5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cF6F0E5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cFF3A2F", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cFF3A2F(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cFF3A2F, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cFFCC00", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cFFCC00(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cFFCC00, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cFFFFFF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func cFFFFFF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cFFFFFF, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c000000", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func c000000(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c000000.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c007AFF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func c007AFF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c007AFF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c275A53", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func c275A53(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c275A53.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c34C759", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func c34C759(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c34C759.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c8E8E93", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func c8E8E93(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c8E8E93.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cCE4834", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cCE4834(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cCE4834.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cD5D5D5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cD5D5D5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cD5D5D5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cE14B34", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cE14B34(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cE14B34.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cF6C66D", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cF6C66D(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cF6C66D.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cF6F0E5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cF6F0E5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cF6F0E5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cFF3A2F", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cFF3A2F(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cFF3A2F.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cFFCC00", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cFFCC00(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cFFCC00.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cFFFFFF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func cFFFFFF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cFFFFFF.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 13 images.
  public struct image {
    /// Image `adminPanel`.
    public static let adminPanel = Rswift.ImageResource(bundle: R.hostingBundle, name: "adminPanel")
    /// Image `camera-focus`.
    public static let cameraFocus = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-focus")
    /// Image `disclosure-indicator`.
    public static let disclosureIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "disclosure-indicator")
    /// Image `gifts`.
    public static let gifts = Rswift.ImageResource(bundle: R.hostingBundle, name: "gifts")
    /// Image `main`.
    public static let main = Rswift.ImageResource(bundle: R.hostingBundle, name: "main")
    /// Image `marks`.
    public static let marks = Rswift.ImageResource(bundle: R.hostingBundle, name: "marks")
    /// Image `news`.
    public static let news = Rswift.ImageResource(bundle: R.hostingBundle, name: "news")
    /// Image `profile-admin`.
    public static let profileAdmin = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-admin")
    /// Image `profile-students`.
    public static let profileStudents = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-students")
    /// Image `reload`.
    public static let reload = Rswift.ImageResource(bundle: R.hostingBundle, name: "reload")
    /// Image `settings`.
    public static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `shop`.
    public static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `splash`.
    public static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "adminPanel", bundle: ..., traitCollection: ...)`
    public static func adminPanel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adminPanel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-focus", bundle: ..., traitCollection: ...)`
    public static func cameraFocus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraFocus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "disclosure-indicator", bundle: ..., traitCollection: ...)`
    public static func disclosureIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disclosureIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gifts", bundle: ..., traitCollection: ...)`
    public static func gifts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gifts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main", bundle: ..., traitCollection: ...)`
    public static func main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marks", bundle: ..., traitCollection: ...)`
    public static func marks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "news", bundle: ..., traitCollection: ...)`
    public static func news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.news, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-admin", bundle: ..., traitCollection: ...)`
    public static func profileAdmin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileAdmin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-students", bundle: ..., traitCollection: ...)`
    public static func profileStudents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileStudents, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reload", bundle: ..., traitCollection: ...)`
    public static func reload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    public static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    public static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    public static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  public struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 261 localization keys.
    public struct localizable {
      /// en translation: %@  уровень
      ///
      /// Locales: en
      public static let selectStudentsLevel = Rswift.StringResource(key: "SelectStudents.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %@ уровень
      ///
      /// Locales: en
      public static let selectLevelLevel = Rswift.StringResource(key: "SelectLevel.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %@, тебе не приходят уроки, потому что мы в течении нескольких месяцев не дождались от тебя ответа.  Если ты хочешь возобновить обучение, тебе нужно прислать выполненные уроки.
      ///
      /// Locales: en
      public static let profileWarningDescription = Rswift.StringResource(key: "Profile.warningDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BLE соеденениям
      ///
      /// Locales: en
      public static let printersBluetoothLowEnergy = Rswift.StringResource(key: "Printers.bluetoothLowEnergy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bluetooth соеденениям
      ///
      /// Locales: en
      public static let printersBluetooth = Rswift.StringResource(key: "Printers.bluetooth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ethernet или LAN соеденениям
      ///
      /// Locales: en
      public static let printersEthernetOrWirelessLAN = Rswift.StringResource(key: "Printers.ethernetOrWirelessLAN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ID
      ///
      /// Locales: en
      public static let dataTableId = Rswift.StringResource(key: "DataTable.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      public static let commonOk = Rswift.StringResource(key: "Common.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pежим разработчика
      ///
      /// Locales: en
      public static let devDevelopTitle = Rswift.StringResource(key: "Dev.developTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: USB соеденениям
      ///
      /// Locales: en
      public static let printersUsb = Rswift.StringResource(key: "Printers.usb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: А уроки:
      ///
      /// Locales: en
      public static let selectMarkTypesALessons = Rswift.StringResource(key: "SelectMarkTypes.aLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Авторизация
      ///
      /// Locales: en
      public static let authAuthorization = Rswift.StringResource(key: "Auth.authorization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Админка
      ///
      /// Locales: en
      public static let tabsAdminPanel = Rswift.StringResource(key: "Tabs.adminPanel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Адрес
      ///
      /// Locales: en
      public static let profileAddress = Rswift.StringResource(key: "Profile.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Адрес
      ///
      /// Locales: en
      public static let studentInfoAddress = Rswift.StringResource(key: "StudentInfo.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Адрес (по возрастанию)
      ///
      /// Locales: en
      public static let sortAddressAlphabetically = Rswift.StringResource(key: "Sort.addressAlphabetically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Адрес (по убыванию)
      ///
      /// Locales: en
      public static let sortAddressNonAlphabetically = Rswift.StringResource(key: "Sort.addressNonAlphabetically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Адрес:
      ///
      /// Locales: en
      public static let selectStudentsAddress = Rswift.StringResource(key: "SelectStudents.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Активные дети
      ///
      /// Locales: en
      public static let filterActive = Rswift.StringResource(key: "Filter.active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Б уроки:
      ///
      /// Locales: en
      public static let selectMarkTypesBLessons = Rswift.StringResource(key: "SelectMarkTypes.bLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Баллы
      ///
      /// Locales: en
      public static let studentInfoMarks = Rswift.StringResource(key: "StudentInfo.marks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Без типа
      ///
      /// Locales: en
      public static let selectStudentsNoType = Rswift.StringResource(key: "SelectStudents.noType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Без фильтра
      ///
      /// Locales: en
      public static let filterNone = Rswift.StringResource(key: "Filter.none", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Беларусь
      ///
      /// Locales: en
      public static let dataTableBelarus = Rswift.StringResource(key: "DataTable.belarus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: В уроки:
      ///
      /// Locales: en
      public static let selectMarkTypesCLessons = Rswift.StringResource(key: "SelectMarkTypes.cLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ВНИМАНИЕ, идет сканирование QR кода на передней камере
      ///
      /// Locales: en
      public static let selectStudentsLessonToAddAttantion = Rswift.StringResource(key: "SelectStudents.lessonToAddAttantion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Важное
      ///
      /// Locales: en
      public static let adminPanelImportant = Rswift.StringResource(key: "AdminPanel.important", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Важное замечание: отправка, которая собирается в текущем месяце, делается на следующий месяц. То есть месяц нужно выбирать не текущий, а следующий.
      ///
      /// Locales: en
      public static let birthdaysAlertMessage = Rswift.StringResource(key: "Birthdays.alertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Вбитие уроков
      ///
      /// Locales: en
      public static let adminPanelAddLessons = Rswift.StringResource(key: "AdminPanel.addLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Вводный
      ///
      /// Locales: en
      public static let dataTableIntro = Rswift.StringResource(key: "DataTable.intro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Включить
      ///
      /// Locales: en
      public static let devEnable = Rswift.StringResource(key: "Dev.enable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Внимание!
      ///
      /// Locales: en
      public static let profileWarningTitle = Rswift.StringResource(key: "Profile.warningTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Возраст:
      ///
      /// Locales: en
      public static let selectStudentsAge = Rswift.StringResource(key: "SelectStudents.age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Все активные и преактивные студенты
      ///
      /// Locales: en
      public static let dataTableAllStudents = Rswift.StringResource(key: "DataTable.allStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Всем соединениям
      ///
      /// Locales: en
      public static let printersAll = Rswift.StringResource(key: "Printers.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Вход
      ///
      /// Locales: en
      public static let authInput = Rswift.StringResource(key: "Auth.input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выберите меню которое вы ожидаете увидеть, и оно отобразится
      ///
      /// Locales: en
      public static let emptySelectMenuInList = Rswift.StringResource(key: "Empty.selectMenuInList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выберите месяц
      ///
      /// Locales: en
      public static let birthdaysAlertTitle = Rswift.StringResource(key: "Birthdays.alertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выберите студента, информацию о котором вы ожидаете увидеть, и она отобразится
      ///
      /// Locales: en
      public static let emptySelectStudentInList = Rswift.StringResource(key: "Empty.selectStudentInList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбранные студенты
      ///
      /// Locales: en
      public static let dataTableSelectedStudents = Rswift.StringResource(key: "DataTable.selectedStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбранные студенты:
      ///
      /// Locales: en
      public static let selectStudentsSelectedItems = Rswift.StringResource(key: "SelectStudents.selectedItems", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбранный месяц:
      ///
      /// Locales: en
      public static let birthdaysCurrentMonth = Rswift.StringResource(key: "Birthdays.currentMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать
      ///
      /// Locales: en
      public static let selectMarkTypesSelect = Rswift.StringResource(key: "SelectMarkTypes.select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать  тип урока
      ///
      /// Locales: en
      public static let selectStudentsSelectMarkType = Rswift.StringResource(key: "SelectStudents.selectMarkType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать  уровень
      ///
      /// Locales: en
      public static let selectStudentsSelectLevel = Rswift.StringResource(key: "SelectStudents.selectLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать и добавить
      ///
      /// Locales: en
      public static let selectMarkTypesSelectAndAdd = Rswift.StringResource(key: "SelectMarkTypes.selectAndAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать месяц
      ///
      /// Locales: en
      public static let birthdaysSelectMonth = Rswift.StringResource(key: "Birthdays.selectMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выбрать уроки
      ///
      /// Locales: en
      public static let selectStudentsSelectLessons = Rswift.StringResource(key: "SelectStudents.selectLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выйти
      ///
      /// Locales: en
      public static let profileExit = Rswift.StringResource(key: "Profile.exit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выключить
      ///
      /// Locales: en
      public static let devDisable = Rswift.StringResource(key: "Dev.disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выполнил
      ///
      /// Locales: en
      public static let commonCompleted = Rswift.StringResource(key: "Common.completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выполнил А курс(присланы все уроки)
      ///
      /// Locales: en
      public static let studentInfoIsEndedA = Rswift.StringResource(key: "StudentInfo.isEndedA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выполнил Б курс(присланы все уроки)
      ///
      /// Locales: en
      public static let studentInfoIsEndedB = Rswift.StringResource(key: "StudentInfo.isEndedB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выполнил В курс(присланы все уроки)
      ///
      /// Locales: en
      public static let studentInfoIsEndedC = Rswift.StringResource(key: "StudentInfo.isEndedC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Выполнил вводный курс(присланы все уроки)
      ///
      /// Locales: en
      public static let studentInfoIsEndedIntro = Rswift.StringResource(key: "StudentInfo.isEndedIntro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Высшие предупреждения
      ///
      /// Locales: en
      public static let adminPanelHightNotice = Rswift.StringResource(key: "AdminPanel.hightNotice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Высшие предупреждения
      ///
      /// Locales: en
      public static let hightNoticesTitle = Rswift.StringResource(key: "HightNotices.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Город
      ///
      /// Locales: en
      public static let dataTableCity = Rswift.StringResource(key: "DataTable.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Город
      ///
      /// Locales: en
      public static let profileCity = Rswift.StringResource(key: "Profile.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Город
      ///
      /// Locales: en
      public static let studentInfoCity = Rswift.StringResource(key: "StudentInfo.city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Да
      ///
      /// Locales: en
      public static let commonYes = Rswift.StringResource(key: "Common.yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дата добавления
      ///
      /// Locales: en
      public static let studentInfoAddDate = Rswift.StringResource(key: "StudentInfo.addDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дата получения
      ///
      /// Locales: en
      public static let studentInfoReciveDate = Rswift.StringResource(key: "StudentInfo.reciveDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дата рождения
      ///
      /// Locales: en
      public static let studentInfoBirthday = Rswift.StringResource(key: "StudentInfo.birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дата рождения
      ///
      /// Locales: en
      public static let studentInfoDateOfBirth = Rswift.StringResource(key: "StudentInfo.dateOfBirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Действия
      ///
      /// Locales: en
      public static let profileActions = Rswift.StringResource(key: "Profile.actions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Действия
      ///
      /// Locales: en
      public static let studentInfoActions = Rswift.StringResource(key: "StudentInfo.actions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: День рождения
      ///
      /// Locales: en
      public static let profileBirthday = Rswift.StringResource(key: "Profile.birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дети %@ уровня
      ///
      /// Locales: en
      public static let filterLevel = Rswift.StringResource(key: "Filter.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дети окончившие учебу
      ///
      /// Locales: en
      public static let filterEnded = Rswift.StringResource(key: "Filter.ended", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дни рождения
      ///
      /// Locales: en
      public static let adminPanelBirthdays = Rswift.StringResource(key: "AdminPanel.birthdays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Дни рождения
      ///
      /// Locales: en
      public static let birthdaysTitle = Rswift.StringResource(key: "Birthdays.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавить  урок
      ///
      /// Locales: en
      public static let studentInfoSendLesson = Rswift.StringResource(key: "StudentInfo.sendLesson", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавить  урок и баллы
      ///
      /// Locales: en
      public static let studentInfoAddMarks = Rswift.StringResource(key: "StudentInfo.addMarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавить "Без типа"
      ///
      /// Locales: en
      public static let selectStudentsAddNoType = Rswift.StringResource(key: "SelectStudents.addNoType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавить урок
      ///
      /// Locales: en
      public static let selectStudentsAddLessonStudent = Rswift.StringResource(key: "SelectStudents.addLessonStudent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавить урок всем
      ///
      /// Locales: en
      public static let selectStudentsAddLessonAllStudents = Rswift.StringResource(key: "SelectStudents.addLessonAllStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Добавление новых учеников
      ///
      /// Locales: en
      public static let adminPanelAddNewStudent = Rswift.StringResource(key: "AdminPanel.addNewStudent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Домашний номер телефона
      ///
      /// Locales: en
      public static let studentInfoHomePhoneNumber = Rswift.StringResource(key: "StudentInfo.homePhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Домашний телефон
      ///
      /// Locales: en
      public static let profileHomePhone = Rswift.StringResource(key: "Profile.homePhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Доступные принтеры
      ///
      /// Locales: en
      public static let adminPanelPrinters = Rswift.StringResource(key: "AdminPanel.printers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Другие:
      ///
      /// Locales: en
      public static let selectMarkTypesOther = Rswift.StringResource(key: "SelectMarkTypes.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Другое
      ///
      /// Locales: en
      public static let adminPanelOther = Rswift.StringResource(key: "AdminPanel.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Другое
      ///
      /// Locales: en
      public static let profileOther = Rswift.StringResource(key: "Profile.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ежемесячная работа
      ///
      /// Locales: en
      public static let adminPanelEveryMonth = Rswift.StringResource(key: "AdminPanel.everyMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Есть
      ///
      /// Locales: en
      public static let commonHas = Rswift.StringResource(key: "Common.has", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Закрыть
      ///
      /// Locales: en
      public static let printLabelClose = Rswift.StringResource(key: "PrintLabel.close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Заметка
      ///
      /// Locales: en
      public static let studentInfoNote = Rswift.StringResource(key: "StudentInfo.note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static let adminPanelInactiveToActive = Rswift.StringResource(key: "AdminPanel.inactiveToActive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static let inactiveActiveTitle = Rswift.StringResource(key: "InactiveActive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static let wrongLevelsTitle = Rswift.StringResource(key: "WrongLevels.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из преактивных в активные
      ///
      /// Locales: en
      public static let adminPanelPreactiveToActive = Rswift.StringResource(key: "AdminPanel.preactiveToActive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из преактивных в активные
      ///
      /// Locales: en
      public static let preactiveActiveTitle = Rswift.StringResource(key: "PreactiveActive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Из преактивных в неактивные
      ///
      /// Locales: en
      public static let adminPanelPreactiveToInactive = Rswift.StringResource(key: "AdminPanel.preactiveToInactive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Изменить
      ///
      /// Locales: en
      public static let wrongLevelsIssue = Rswift.StringResource(key: "WrongLevels.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Изменить  аккаунт
      ///
      /// Locales: en
      public static let profileChangeAccount = Rswift.StringResource(key: "Profile.changeAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Имя
      ///
      /// Locales: en
      public static let dataTableName = Rswift.StringResource(key: "DataTable.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Индекс
      ///
      /// Locales: en
      public static let dataTableIndex = Rswift.StringResource(key: "DataTable.index", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Индекс
      ///
      /// Locales: en
      public static let profileIndex = Rswift.StringResource(key: "Profile.index", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Индекс
      ///
      /// Locales: en
      public static let studentInfoIndex = Rswift.StringResource(key: "StudentInfo.index", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Инструктор не найден
      ///
      /// Locales: en
      public static let profileNotFound = Rswift.StringResource(key: "Profile.notFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Инструктор по переписке
      ///
      /// Locales: en
      public static let studentInfoLetterInstructor = Rswift.StringResource(key: "StudentInfo.letterInstructor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Информация об учебе
      ///
      /// Locales: en
      public static let studentInfoInfoAboutStudy = Rswift.StringResource(key: "StudentInfo.infoAboutStudy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Кем приглашен
      ///
      /// Locales: en
      public static let studentInfoInvitedBy = Rswift.StringResource(key: "StudentInfo.invitedBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Количество
      ///
      /// Locales: en
      public static let studentInfoCount = Rswift.StringResource(key: "StudentInfo.count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Личная информация
      ///
      /// Locales: en
      public static let profilePersonalInfo = Rswift.StringResource(key: "Profile.personalInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Личная информация
      ///
      /// Locales: en
      public static let studentInfoPersonalInfo = Rswift.StringResource(key: "StudentInfo.personalInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Логи
      ///
      /// Locales: en
      public static let adminPanelLoggers = Rswift.StringResource(key: "AdminPanel.loggers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Логин
      ///
      /// Locales: en
      public static let authLogin = Rswift.StringResource(key: "Auth.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Логин
      ///
      /// Locales: en
      public static let dataTableLogin = Rswift.StringResource(key: "DataTable.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: МИНУС
      ///
      /// Locales: en
      public static let awardMinus = Rswift.StringResource(key: "Award.minus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Магазин
      ///
      /// Locales: en
      public static let adminPanelShop = Rswift.StringResource(key: "AdminPanel.shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Магазин
      ///
      /// Locales: en
      public static let tabsShop = Rswift.StringResource(key: "Tabs.shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Мобильный номер телефона
      ///
      /// Locales: en
      public static let studentInfoMobileNumber = Rswift.StringResource(key: "StudentInfo.mobileNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Мобильный телефон
      ///
      /// Locales: en
      public static let profileMobilePhone = Rswift.StringResource(key: "Profile.mobilePhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Наименование
      ///
      /// Locales: en
      public static let studentInfoNaming = Rswift.StringResource(key: "StudentInfo.naming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Найденные принтеры:
      ///
      /// Locales: en
      public static let printersSeachedPrinters = Rswift.StringResource(key: "Printers.seachedPrinters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Напечатать
      ///
      /// Locales: en
      public static let selectStudentsPrint = Rswift.StringResource(key: "SelectStudents.print", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Напиши нам
      ///
      /// Locales: en
      public static let authWriteToUs = Rswift.StringResource(key: "Auth.writeToUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Настройки
      ///
      /// Locales: en
      public static let adminPanelPreferences = Rswift.StringResource(key: "AdminPanel.preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Не активные дети
      ///
      /// Locales: en
      public static let filterInactive = Rswift.StringResource(key: "Filter.inactive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Не выбран принтер, пожалуйста, выберите принтер в списке доступных устройств
      ///
      /// Locales: en
      public static let errorsSelectPrinter = Rswift.StringResource(key: "Errors.selectPrinter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Не выполнил
      ///
      /// Locales: en
      public static let commonNotCompleted = Rswift.StringResource(key: "Common.notCompleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Неверно введен логин, пожалуйста, проверьте введенные данные
      ///
      /// Locales: en
      public static let errorsInvalidLogin = Rswift.StringResource(key: "Errors.invalidLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Неверно введен пароль, пожалуйста, проверьте введенные данные
      ///
      /// Locales: en
      public static let errorsInvalidPassword = Rswift.StringResource(key: "Errors.invalidPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Неизвесная ошибка
      ///
      /// Locales: en
      public static let errorsUnknown = Rswift.StringResource(key: "Errors.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Неопределенные студенты
      ///
      /// Locales: en
      public static let adminPanelUndefinedStudents = Rswift.StringResource(key: "AdminPanel.undefinedStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Несовпадение уровня и возраста
      ///
      /// Locales: en
      public static let adminPanelWrondLevel = Rswift.StringResource(key: "AdminPanel.wrondLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Нет
      ///
      /// Locales: en
      public static let commonNo = Rswift.StringResource(key: "Common.no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Нету
      ///
      /// Locales: en
      public static let commonHasNot = Rswift.StringResource(key: "Common.hasNot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Новости
      ///
      /// Locales: en
      public static let tabsNews = Rswift.StringResource(key: "Tabs.news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Новые дети
      ///
      /// Locales: en
      public static let filterNew = Rswift.StringResource(key: "Filter.new", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Новые студенты
      ///
      /// Locales: en
      public static let dataTableAllNewStudents = Rswift.StringResource(key: "DataTable.allNewStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Номер дома
      ///
      /// Locales: en
      public static let dataTableHouseNumber = Rswift.StringResource(key: "DataTable.houseNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Номер дома
      ///
      /// Locales: en
      public static let profileHouseNumber = Rswift.StringResource(key: "Profile.houseNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Номер дома
      ///
      /// Locales: en
      public static let studentInfoNumberOfHouse = Rswift.StringResource(key: "StudentInfo.numberOfHouse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ОТПРАВКУ ВОВРЕМЯ
      ///
      /// Locales: en
      public static let awardTimelySending = Rswift.StringResource(key: "Award.timelySending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Область
      ///
      /// Locales: en
      public static let dataTableRegion = Rswift.StringResource(key: "DataTable.region", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Область
      ///
      /// Locales: en
      public static let profileRegion = Rswift.StringResource(key: "Profile.region", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Область
      ///
      /// Locales: en
      public static let studentInfoRegion = Rswift.StringResource(key: "StudentInfo.region", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Обновить
      ///
      /// Locales: en
      public static let printersReload = Rswift.StringResource(key: "Printers.reload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ожидаемый уровень
      ///
      /// Locales: en
      public static let wrongLevelsLabel = Rswift.StringResource(key: "WrongLevels.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отмена
      ///
      /// Locales: en
      public static let commonCancel = Rswift.StringResource(key: "Common.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отправка уроков
      ///
      /// Locales: en
      public static let adminPanelSendLessons = Rswift.StringResource(key: "AdminPanel.sendLessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отсуствует ID пользователя, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static let errorsAbsentUserId = Rswift.StringResource(key: "Errors.absentUserId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отсуствует ID школы, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static let errorsAbsentSchoolId = Rswift.StringResource(key: "Errors.absentSchoolId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отсуствует инструктор, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static let errorsAbsentInstructor = Rswift.StringResource(key: "Errors.absentInstructor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отсуствует пользователь, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static let errorsAbsentUser = Rswift.StringResource(key: "Errors.absentUser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отсуствуют параметры, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static let errorsEmptyParams = Rswift.StringResource(key: "Errors.emptyParams", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отчество
      ///
      /// Locales: en
      public static let dataTableMiddleName = Rswift.StringResource(key: "DataTable.middleName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Оформить
      ///
      /// Locales: en
      public static let adminPanelIssue = Rswift.StringResource(key: "AdminPanel.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Оформить
      ///
      /// Locales: en
      public static let hightNoticesIssue = Rswift.StringResource(key: "HightNotices.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Оформить
      ///
      /// Locales: en
      public static let inactiveActiveIssue = Rswift.StringResource(key: "InactiveActive.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Оформить
      ///
      /// Locales: en
      public static let preactiveActiveIssue = Rswift.StringResource(key: "PreactiveActive.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Оформить
      ///
      /// Locales: en
      public static let preactiveInactiveIssue = Rswift.StringResource(key: "PreactiveInactive.issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ошибка
      ///
      /// Locales: en
      public static let commonError = Rswift.StringResource(key: "Common.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ошибка на сервере, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static let errorsServer = Rswift.StringResource(key: "Errors.server", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ПЛЮС
      ///
      /// Locales: en
      public static let awardPlus = Rswift.StringResource(key: "Award.plus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ПОЗДНЮЮ ОТПРАВКУ
      ///
      /// Locales: en
      public static let awardLateSending = Rswift.StringResource(key: "Award.lateSending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Пароль
      ///
      /// Locales: en
      public static let authPassword = Rswift.StringResource(key: "Auth.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Пароль
      ///
      /// Locales: en
      public static let dataTablePassword = Rswift.StringResource(key: "DataTable.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Перевод на взрослые курсы
      ///
      /// Locales: en
      public static let adminPanelEndSchool = Rswift.StringResource(key: "AdminPanel.endSchool", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Перекачать  студентов из базы
      ///
      /// Locales: en
      public static let studentsReloadStudents = Rswift.StringResource(key: "Students.reloadStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Печать  адреса
      ///
      /// Locales: en
      public static let studentInfoPrintAddress = Rswift.StringResource(key: "StudentInfo.printAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Печать  чека
      ///
      /// Locales: en
      public static let studentInfoPrintCheck = Rswift.StringResource(key: "StudentInfo.printCheck", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Печать чеков
      ///
      /// Locales: en
      public static let adminPanelPrintCheck = Rswift.StringResource(key: "AdminPanel.printCheck", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Печать этикетки
      ///
      /// Locales: en
      public static let adminPanelPrintLabel = Rswift.StringResource(key: "AdminPanel.printLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Платежи
      ///
      /// Locales: en
      public static let studentInfoPayments = Rswift.StringResource(key: "StudentInfo.payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Подарки
      ///
      /// Locales: en
      public static let tabsGifts = Rswift.StringResource(key: "Tabs.gifts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Позвать друга
      ///
      /// Locales: en
      public static let profileInvite = Rswift.StringResource(key: "Profile.invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Поиск  по QR коду
      ///
      /// Locales: en
      public static let studentsSearchByQR = Rswift.StringResource(key: "Students.searchByQR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Показать  логин
      ///
      /// Locales: en
      public static let studentInfoShowLogin = Rswift.StringResource(key: "StudentInfo.showLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Покупки
      ///
      /// Locales: en
      public static let adminPanelPurchases = Rswift.StringResource(key: "AdminPanel.purchases", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Покупки
      ///
      /// Locales: en
      public static let studentInfoPurchases = Rswift.StringResource(key: "StudentInfo.purchases", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Почтадоллары
      ///
      /// Locales: en
      public static let profileAmount = Rswift.StringResource(key: "Profile.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Преактивные дети
      ///
      /// Locales: en
      public static let filterPreactive = Rswift.StringResource(key: "Filter.preactive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Предупреждения
      ///
      /// Locales: en
      public static let studentInfoNotices = Rswift.StringResource(key: "StudentInfo.notices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Проблема с ответом от сервера, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static let errorsResultData = Rswift.StringResource(key: "Errors.resultData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Проблема с подключением к принтеру, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static let errorsOpenPort = Rswift.StringResource(key: "Errors.openPort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Проблемы с экспортом XLSX, обратитесь к разработчику
      ///
      /// Locales: en
      public static let errorsExportCSV = Rswift.StringResource(key: "Errors.exportCSV", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Проблемы со входом?
      ///
      /// Locales: en
      public static let authProblemsLoggingIn = Rswift.StringResource(key: "Auth.problemsLoggingIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Проверка дубликатов
      ///
      /// Locales: en
      public static let adminPanelDublicates = Rswift.StringResource(key: "AdminPanel.dublicates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Производить поиск подключенных принтеров по:
      ///
      /// Locales: en
      public static let printersSearchPrintersIn = Rswift.StringResource(key: "Printers.searchPrintersIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Профиль
      ///
      /// Locales: en
      public static let profileTitle = Rswift.StringResource(key: "Profile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Профиль
      ///
      /// Locales: en
      public static let tabsProfileAdmin = Rswift.StringResource(key: "Tabs.profileAdmin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Профиль
      ///
      /// Locales: en
      public static let tabsProfileStudent = Rswift.StringResource(key: "Tabs.profileStudent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Разрешение родителей
      ///
      /// Locales: en
      public static let studentInfoParentalPermission = Rswift.StringResource(key: "StudentInfo.parentalPermission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Район
      ///
      /// Locales: en
      public static let dataTableArea = Rswift.StringResource(key: "DataTable.area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Район
      ///
      /// Locales: en
      public static let profileArea = Rswift.StringResource(key: "Profile.area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Район
      ///
      /// Locales: en
      public static let studentInfoArea = Rswift.StringResource(key: "StudentInfo.area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Регистрация
      ///
      /// Locales: en
      public static let authRegistration = Rswift.StringResource(key: "Auth.registration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  инструктора по переписке
      ///
      /// Locales: en
      public static let studentInfoEditInstructor = Rswift.StringResource(key: "StudentInfo.editInstructor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  пароль
      ///
      /// Locales: en
      public static let studentInfoEditPassword = Rswift.StringResource(key: "StudentInfo.editPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  профиль
      ///
      /// Locales: en
      public static let profileEditProfile = Rswift.StringResource(key: "Profile.editProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  профиль
      ///
      /// Locales: en
      public static let studentInfoEditProfile = Rswift.StringResource(key: "StudentInfo.editProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  статус
      ///
      /// Locales: en
      public static let studentInfoEditStatus = Rswift.StringResource(key: "StudentInfo.editStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  уровень
      ///
      /// Locales: en
      public static let studentInfoEditLevel = Rswift.StringResource(key: "StudentInfo.editLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  церковь
      ///
      /// Locales: en
      public static let studentInfoEditChurch = Rswift.StringResource(key: "StudentInfo.editChurch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Редактировать  школу
      ///
      /// Locales: en
      public static let studentInfoEditSchool = Rswift.StringResource(key: "StudentInfo.editSchool", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: С возвращением!
      ///
      /// Locales: en
      public static let authWelcomeBack = Rswift.StringResource(key: "Auth.welcomeBack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Следующий
      ///
      /// Locales: en
      public static let dataTableNextLesson = Rswift.StringResource(key: "DataTable.nextLesson", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Список подарков
      ///
      /// Locales: en
      public static let adminPanelGifts = Rswift.StringResource(key: "AdminPanel.gifts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Список студентов пустой, выберите студентов
      ///
      /// Locales: en
      public static let errorsEmptyStudents = Rswift.StringResource(key: "Errors.emptyStudents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статистика
      ///
      /// Locales: en
      public static let adminPanelStatistics = Rswift.StringResource(key: "AdminPanel.statistics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус
      ///
      /// Locales: en
      public static let dataTableStatus = Rswift.StringResource(key: "DataTable.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус
      ///
      /// Locales: en
      public static let profileStatus = Rswift.StringResource(key: "Profile.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус
      ///
      /// Locales: en
      public static let studentInfoStatus = Rswift.StringResource(key: "StudentInfo.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус
      ///
      /// Locales: en
      public static let studentsStatus = Rswift.StringResource(key: "Students.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static let hightNoticesMessage = Rswift.StringResource(key: "HightNotices.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static let inactiveActiveMessage = Rswift.StringResource(key: "InactiveActive.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static let preactiveActiveMessage = Rswift.StringResource(key: "PreactiveActive.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static let preactiveInactiveMessage = Rswift.StringResource(key: "PreactiveInactive.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Статус:
      ///
      /// Locales: en
      public static let selectStudentsStatus = Rswift.StringResource(key: "SelectStudents.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Стоимость
      ///
      /// Locales: en
      public static let studentInfoPrice = Rswift.StringResource(key: "StudentInfo.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Страна
      ///
      /// Locales: en
      public static let dataTableCountry = Rswift.StringResource(key: "DataTable.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Страна
      ///
      /// Locales: en
      public static let profileCountry = Rswift.StringResource(key: "Profile.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Страна
      ///
      /// Locales: en
      public static let studentInfoCountry = Rswift.StringResource(key: "StudentInfo.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Студент не найден
      ///
      /// Locales: en
      public static let studentInfoNotFound = Rswift.StringResource(key: "StudentInfo.notFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Студенты
      ///
      /// Locales: en
      public static let tabsStudents = Rswift.StringResource(key: "Tabs.students", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Сумма
      ///
      /// Locales: en
      public static let studentInfoSum = Rswift.StringResource(key: "StudentInfo.sum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Сумма баллов
      ///
      /// Locales: en
      public static let studentInfoSumMarks = Rswift.StringResource(key: "StudentInfo.sumMarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Сформировать таблицу:
      ///
      /// Locales: en
      public static let dataTableSelectAction = Rswift.StringResource(key: "DataTable.selectAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Текущая информация
      ///
      /// Locales: en
      public static let studentInfoCurrentInfo = Rswift.StringResource(key: "StudentInfo.currentInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Тип
      ///
      /// Locales: en
      public static let studentInfoType = Rswift.StringResource(key: "StudentInfo.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Тип:
      ///
      /// Locales: en
      public static let selectStudentsType = Rswift.StringResource(key: "SelectStudents.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Удалить  ученика из базы
      ///
      /// Locales: en
      public static let studentInfoDelete = Rswift.StringResource(key: "StudentInfo.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Улица
      ///
      /// Locales: en
      public static let dataTableStreet = Rswift.StringResource(key: "DataTable.street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Улица
      ///
      /// Locales: en
      public static let profileStreet = Rswift.StringResource(key: "Profile.street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Улица
      ///
      /// Locales: en
      public static let studentInfoStreet = Rswift.StringResource(key: "StudentInfo.street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уникальный номер:
      ///
      /// Locales: en
      public static let selectStudentsUniqueNumber = Rswift.StringResource(key: "SelectStudents.uniqueNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уникальный номер:
      ///
      /// Locales: en
      public static let studentsUniqueNumber = Rswift.StringResource(key: "Students.uniqueNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уникальный №
      ///
      /// Locales: en
      public static let dataTableUnique = Rswift.StringResource(key: "DataTable.unique", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ур
      ///
      /// Locales: en
      public static let studentInfoLev = Rswift.StringResource(key: "StudentInfo.lev", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень
      ///
      /// Locales: en
      public static let dataTableCurrentLevel = Rswift.StringResource(key: "DataTable.currentLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень
      ///
      /// Locales: en
      public static let profileLevel = Rswift.StringResource(key: "Profile.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень
      ///
      /// Locales: en
      public static let studentInfoLevel = Rswift.StringResource(key: "StudentInfo.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень
      ///
      /// Locales: en
      public static let studentsLevel = Rswift.StringResource(key: "Students.level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень изменен!
      ///
      /// Locales: en
      public static let wrongLevelsMessage = Rswift.StringResource(key: "WrongLevels.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уровень типа:
      ///
      /// Locales: en
      public static let selectStudentsLevelType = Rswift.StringResource(key: "SelectStudents.levelType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Урок для добавления
      ///
      /// Locales: en
      public static let selectStudentsLessonToAdd = Rswift.StringResource(key: "SelectStudents.lessonToAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Урок текущего месяца
      ///
      /// Locales: en
      public static let dataTableCurrentMonth = Rswift.StringResource(key: "DataTable.currentMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уроки
      ///
      /// Locales: en
      public static let studentInfoLessons = Rswift.StringResource(key: "StudentInfo.lessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Уроки
      ///
      /// Locales: en
      public static let tabsLessons = Rswift.StringResource(key: "Tabs.lessons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Успешно
      ///
      /// Locales: en
      public static let successTitle = Rswift.StringResource(key: "Success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Успешно выбран принтер:
      ///
      /// Locales: en
      public static let printersSelectedPrinter = Rswift.StringResource(key: "Printers.selectedPrinter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Успешно напечатано
      ///
      /// Locales: en
      public static let printLabelAlertMessage = Rswift.StringResource(key: "PrintLabel.alertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ФИО (по возрастанию)
      ///
      /// Locales: en
      public static let sortNameAlphabetically = Rswift.StringResource(key: "Sort.nameAlphabetically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ФИО (по убыванию)
      ///
      /// Locales: en
      public static let sortNameNonAlphabetically = Rswift.StringResource(key: "Sort.nameNonAlphabetically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ФИО или адрес
      ///
      /// Locales: en
      public static let studentsSearchPlaceholder = Rswift.StringResource(key: "Students.searchPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ФИО:
      ///
      /// Locales: en
      public static let selectStudentsFullName = Rswift.StringResource(key: "SelectStudents.fullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Фамилия
      ///
      /// Locales: en
      public static let dataTableLastName = Rswift.StringResource(key: "DataTable.lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Формирование таблицы
      ///
      /// Locales: en
      public static let adminPanelDataTable = Rswift.StringResource(key: "AdminPanel.dataTable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Церковь
      ///
      /// Locales: en
      public static let studentInfoChurch = Rswift.StringResource(key: "StudentInfo.church", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Часть 1
      ///
      /// Locales: en
      public static let dataTablePart1 = Rswift.StringResource(key: "DataTable.part1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Часть 2
      ///
      /// Locales: en
      public static let dataTablePart2 = Rswift.StringResource(key: "DataTable.part2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Часть 3
      ///
      /// Locales: en
      public static let dataTablePart3 = Rswift.StringResource(key: "DataTable.part3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Школа
      ///
      /// Locales: en
      public static let profileSchool = Rswift.StringResource(key: "Profile.school", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Электронная почта
      ///
      /// Locales: en
      public static let profileEmail = Rswift.StringResource(key: "Profile.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Электронная почта
      ///
      /// Locales: en
      public static let studentInfoEmail = Rswift.StringResource(key: "StudentInfo.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: баллов за
      ///
      /// Locales: en
      public static let awardBallsFor = Rswift.StringResource(key: "Award.ballsFor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: лет
      ///
      /// Locales: en
      public static let selectStudentsCountOfYears = Rswift.StringResource(key: "SelectStudents.countOfYears", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %@  уровень
      ///
      /// Locales: en
      public static func selectStudentsLevel(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("SelectStudents.level", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.level"
        }

        let format = NSLocalizedString("SelectStudents.level", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ уровень
      ///
      /// Locales: en
      public static func selectLevelLevel(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("SelectLevel.level", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectLevel.level"
        }

        let format = NSLocalizedString("SelectLevel.level", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@, тебе не приходят уроки, потому что мы в течении нескольких месяцев не дождались от тебя ответа.  Если ты хочешь возобновить обучение, тебе нужно прислать выполненные уроки.
      ///
      /// Locales: en
      public static func profileWarningDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Profile.warningDescription", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.warningDescription"
        }

        let format = NSLocalizedString("Profile.warningDescription", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: BLE соеденениям
      ///
      /// Locales: en
      public static func printersBluetoothLowEnergy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.bluetoothLowEnergy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.bluetoothLowEnergy"
        }

        return NSLocalizedString("Printers.bluetoothLowEnergy", bundle: bundle, comment: "")
      }

      /// en translation: Bluetooth соеденениям
      ///
      /// Locales: en
      public static func printersBluetooth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.bluetooth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.bluetooth"
        }

        return NSLocalizedString("Printers.bluetooth", bundle: bundle, comment: "")
      }

      /// en translation: Ethernet или LAN соеденениям
      ///
      /// Locales: en
      public static func printersEthernetOrWirelessLAN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.ethernetOrWirelessLAN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.ethernetOrWirelessLAN"
        }

        return NSLocalizedString("Printers.ethernetOrWirelessLAN", bundle: bundle, comment: "")
      }

      /// en translation: ID
      ///
      /// Locales: en
      public static func dataTableId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.id"
        }

        return NSLocalizedString("DataTable.id", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      public static func commonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.ok"
        }

        return NSLocalizedString("Common.ok", bundle: bundle, comment: "")
      }

      /// en translation: Pежим разработчика
      ///
      /// Locales: en
      public static func devDevelopTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dev.developTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dev.developTitle"
        }

        return NSLocalizedString("Dev.developTitle", bundle: bundle, comment: "")
      }

      /// en translation: USB соеденениям
      ///
      /// Locales: en
      public static func printersUsb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.usb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.usb"
        }

        return NSLocalizedString("Printers.usb", bundle: bundle, comment: "")
      }

      /// en translation: А уроки:
      ///
      /// Locales: en
      public static func selectMarkTypesALessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.aLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.aLessons"
        }

        return NSLocalizedString("SelectMarkTypes.aLessons", bundle: bundle, comment: "")
      }

      /// en translation: Авторизация
      ///
      /// Locales: en
      public static func authAuthorization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.authorization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.authorization"
        }

        return NSLocalizedString("Auth.authorization", bundle: bundle, comment: "")
      }

      /// en translation: Админка
      ///
      /// Locales: en
      public static func tabsAdminPanel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.adminPanel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.adminPanel"
        }

        return NSLocalizedString("Tabs.adminPanel", bundle: bundle, comment: "")
      }

      /// en translation: Адрес
      ///
      /// Locales: en
      public static func profileAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.address"
        }

        return NSLocalizedString("Profile.address", bundle: bundle, comment: "")
      }

      /// en translation: Адрес
      ///
      /// Locales: en
      public static func studentInfoAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.address"
        }

        return NSLocalizedString("StudentInfo.address", bundle: bundle, comment: "")
      }

      /// en translation: Адрес (по возрастанию)
      ///
      /// Locales: en
      public static func sortAddressAlphabetically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort.addressAlphabetically", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort.addressAlphabetically"
        }

        return NSLocalizedString("Sort.addressAlphabetically", bundle: bundle, comment: "")
      }

      /// en translation: Адрес (по убыванию)
      ///
      /// Locales: en
      public static func sortAddressNonAlphabetically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort.addressNonAlphabetically", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort.addressNonAlphabetically"
        }

        return NSLocalizedString("Sort.addressNonAlphabetically", bundle: bundle, comment: "")
      }

      /// en translation: Адрес:
      ///
      /// Locales: en
      public static func selectStudentsAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.address"
        }

        return NSLocalizedString("SelectStudents.address", bundle: bundle, comment: "")
      }

      /// en translation: Активные дети
      ///
      /// Locales: en
      public static func filterActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.active"
        }

        return NSLocalizedString("Filter.active", bundle: bundle, comment: "")
      }

      /// en translation: Б уроки:
      ///
      /// Locales: en
      public static func selectMarkTypesBLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.bLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.bLessons"
        }

        return NSLocalizedString("SelectMarkTypes.bLessons", bundle: bundle, comment: "")
      }

      /// en translation: Баллы
      ///
      /// Locales: en
      public static func studentInfoMarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.marks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.marks"
        }

        return NSLocalizedString("StudentInfo.marks", bundle: bundle, comment: "")
      }

      /// en translation: Без типа
      ///
      /// Locales: en
      public static func selectStudentsNoType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.noType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.noType"
        }

        return NSLocalizedString("SelectStudents.noType", bundle: bundle, comment: "")
      }

      /// en translation: Без фильтра
      ///
      /// Locales: en
      public static func filterNone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.none", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.none"
        }

        return NSLocalizedString("Filter.none", bundle: bundle, comment: "")
      }

      /// en translation: Беларусь
      ///
      /// Locales: en
      public static func dataTableBelarus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.belarus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.belarus"
        }

        return NSLocalizedString("DataTable.belarus", bundle: bundle, comment: "")
      }

      /// en translation: В уроки:
      ///
      /// Locales: en
      public static func selectMarkTypesCLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.cLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.cLessons"
        }

        return NSLocalizedString("SelectMarkTypes.cLessons", bundle: bundle, comment: "")
      }

      /// en translation: ВНИМАНИЕ, идет сканирование QR кода на передней камере
      ///
      /// Locales: en
      public static func selectStudentsLessonToAddAttantion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.lessonToAddAttantion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.lessonToAddAttantion"
        }

        return NSLocalizedString("SelectStudents.lessonToAddAttantion", bundle: bundle, comment: "")
      }

      /// en translation: Важное
      ///
      /// Locales: en
      public static func adminPanelImportant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.important", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.important"
        }

        return NSLocalizedString("AdminPanel.important", bundle: bundle, comment: "")
      }

      /// en translation: Важное замечание: отправка, которая собирается в текущем месяце, делается на следующий месяц. То есть месяц нужно выбирать не текущий, а следующий.
      ///
      /// Locales: en
      public static func birthdaysAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdays.alertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdays.alertMessage"
        }

        return NSLocalizedString("Birthdays.alertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Вбитие уроков
      ///
      /// Locales: en
      public static func adminPanelAddLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.addLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.addLessons"
        }

        return NSLocalizedString("AdminPanel.addLessons", bundle: bundle, comment: "")
      }

      /// en translation: Вводный
      ///
      /// Locales: en
      public static func dataTableIntro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.intro"
        }

        return NSLocalizedString("DataTable.intro", bundle: bundle, comment: "")
      }

      /// en translation: Включить
      ///
      /// Locales: en
      public static func devEnable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dev.enable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dev.enable"
        }

        return NSLocalizedString("Dev.enable", bundle: bundle, comment: "")
      }

      /// en translation: Внимание!
      ///
      /// Locales: en
      public static func profileWarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.warningTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.warningTitle"
        }

        return NSLocalizedString("Profile.warningTitle", bundle: bundle, comment: "")
      }

      /// en translation: Возраст:
      ///
      /// Locales: en
      public static func selectStudentsAge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.age"
        }

        return NSLocalizedString("SelectStudents.age", bundle: bundle, comment: "")
      }

      /// en translation: Все активные и преактивные студенты
      ///
      /// Locales: en
      public static func dataTableAllStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.allStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.allStudents"
        }

        return NSLocalizedString("DataTable.allStudents", bundle: bundle, comment: "")
      }

      /// en translation: Всем соединениям
      ///
      /// Locales: en
      public static func printersAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.all"
        }

        return NSLocalizedString("Printers.all", bundle: bundle, comment: "")
      }

      /// en translation: Вход
      ///
      /// Locales: en
      public static func authInput(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.input", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.input"
        }

        return NSLocalizedString("Auth.input", bundle: bundle, comment: "")
      }

      /// en translation: Выберите меню которое вы ожидаете увидеть, и оно отобразится
      ///
      /// Locales: en
      public static func emptySelectMenuInList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Empty.selectMenuInList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Empty.selectMenuInList"
        }

        return NSLocalizedString("Empty.selectMenuInList", bundle: bundle, comment: "")
      }

      /// en translation: Выберите месяц
      ///
      /// Locales: en
      public static func birthdaysAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdays.alertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdays.alertTitle"
        }

        return NSLocalizedString("Birthdays.alertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Выберите студента, информацию о котором вы ожидаете увидеть, и она отобразится
      ///
      /// Locales: en
      public static func emptySelectStudentInList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Empty.selectStudentInList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Empty.selectStudentInList"
        }

        return NSLocalizedString("Empty.selectStudentInList", bundle: bundle, comment: "")
      }

      /// en translation: Выбранные студенты
      ///
      /// Locales: en
      public static func dataTableSelectedStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.selectedStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.selectedStudents"
        }

        return NSLocalizedString("DataTable.selectedStudents", bundle: bundle, comment: "")
      }

      /// en translation: Выбранные студенты:
      ///
      /// Locales: en
      public static func selectStudentsSelectedItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.selectedItems", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.selectedItems"
        }

        return NSLocalizedString("SelectStudents.selectedItems", bundle: bundle, comment: "")
      }

      /// en translation: Выбранный месяц:
      ///
      /// Locales: en
      public static func birthdaysCurrentMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdays.currentMonth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdays.currentMonth"
        }

        return NSLocalizedString("Birthdays.currentMonth", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать
      ///
      /// Locales: en
      public static func selectMarkTypesSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.select"
        }

        return NSLocalizedString("SelectMarkTypes.select", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать  тип урока
      ///
      /// Locales: en
      public static func selectStudentsSelectMarkType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.selectMarkType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.selectMarkType"
        }

        return NSLocalizedString("SelectStudents.selectMarkType", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать  уровень
      ///
      /// Locales: en
      public static func selectStudentsSelectLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.selectLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.selectLevel"
        }

        return NSLocalizedString("SelectStudents.selectLevel", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать и добавить
      ///
      /// Locales: en
      public static func selectMarkTypesSelectAndAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.selectAndAdd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.selectAndAdd"
        }

        return NSLocalizedString("SelectMarkTypes.selectAndAdd", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать месяц
      ///
      /// Locales: en
      public static func birthdaysSelectMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdays.selectMonth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdays.selectMonth"
        }

        return NSLocalizedString("Birthdays.selectMonth", bundle: bundle, comment: "")
      }

      /// en translation: Выбрать уроки
      ///
      /// Locales: en
      public static func selectStudentsSelectLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.selectLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.selectLessons"
        }

        return NSLocalizedString("SelectStudents.selectLessons", bundle: bundle, comment: "")
      }

      /// en translation: Выйти
      ///
      /// Locales: en
      public static func profileExit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.exit"
        }

        return NSLocalizedString("Profile.exit", bundle: bundle, comment: "")
      }

      /// en translation: Выключить
      ///
      /// Locales: en
      public static func devDisable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dev.disable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dev.disable"
        }

        return NSLocalizedString("Dev.disable", bundle: bundle, comment: "")
      }

      /// en translation: Выполнил
      ///
      /// Locales: en
      public static func commonCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.completed"
        }

        return NSLocalizedString("Common.completed", bundle: bundle, comment: "")
      }

      /// en translation: Выполнил А курс(присланы все уроки)
      ///
      /// Locales: en
      public static func studentInfoIsEndedA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.isEndedA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.isEndedA"
        }

        return NSLocalizedString("StudentInfo.isEndedA", bundle: bundle, comment: "")
      }

      /// en translation: Выполнил Б курс(присланы все уроки)
      ///
      /// Locales: en
      public static func studentInfoIsEndedB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.isEndedB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.isEndedB"
        }

        return NSLocalizedString("StudentInfo.isEndedB", bundle: bundle, comment: "")
      }

      /// en translation: Выполнил В курс(присланы все уроки)
      ///
      /// Locales: en
      public static func studentInfoIsEndedC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.isEndedC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.isEndedC"
        }

        return NSLocalizedString("StudentInfo.isEndedC", bundle: bundle, comment: "")
      }

      /// en translation: Выполнил вводный курс(присланы все уроки)
      ///
      /// Locales: en
      public static func studentInfoIsEndedIntro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.isEndedIntro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.isEndedIntro"
        }

        return NSLocalizedString("StudentInfo.isEndedIntro", bundle: bundle, comment: "")
      }

      /// en translation: Высшие предупреждения
      ///
      /// Locales: en
      public static func adminPanelHightNotice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.hightNotice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.hightNotice"
        }

        return NSLocalizedString("AdminPanel.hightNotice", bundle: bundle, comment: "")
      }

      /// en translation: Высшие предупреждения
      ///
      /// Locales: en
      public static func hightNoticesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HightNotices.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HightNotices.title"
        }

        return NSLocalizedString("HightNotices.title", bundle: bundle, comment: "")
      }

      /// en translation: Город
      ///
      /// Locales: en
      public static func dataTableCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.city"
        }

        return NSLocalizedString("DataTable.city", bundle: bundle, comment: "")
      }

      /// en translation: Город
      ///
      /// Locales: en
      public static func profileCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.city"
        }

        return NSLocalizedString("Profile.city", bundle: bundle, comment: "")
      }

      /// en translation: Город
      ///
      /// Locales: en
      public static func studentInfoCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.city"
        }

        return NSLocalizedString("StudentInfo.city", bundle: bundle, comment: "")
      }

      /// en translation: Да
      ///
      /// Locales: en
      public static func commonYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.yes"
        }

        return NSLocalizedString("Common.yes", bundle: bundle, comment: "")
      }

      /// en translation: Дата добавления
      ///
      /// Locales: en
      public static func studentInfoAddDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.addDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.addDate"
        }

        return NSLocalizedString("StudentInfo.addDate", bundle: bundle, comment: "")
      }

      /// en translation: Дата получения
      ///
      /// Locales: en
      public static func studentInfoReciveDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.reciveDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.reciveDate"
        }

        return NSLocalizedString("StudentInfo.reciveDate", bundle: bundle, comment: "")
      }

      /// en translation: Дата рождения
      ///
      /// Locales: en
      public static func studentInfoBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.birthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.birthday"
        }

        return NSLocalizedString("StudentInfo.birthday", bundle: bundle, comment: "")
      }

      /// en translation: Дата рождения
      ///
      /// Locales: en
      public static func studentInfoDateOfBirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.dateOfBirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.dateOfBirth"
        }

        return NSLocalizedString("StudentInfo.dateOfBirth", bundle: bundle, comment: "")
      }

      /// en translation: Действия
      ///
      /// Locales: en
      public static func profileActions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.actions"
        }

        return NSLocalizedString("Profile.actions", bundle: bundle, comment: "")
      }

      /// en translation: Действия
      ///
      /// Locales: en
      public static func studentInfoActions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.actions"
        }

        return NSLocalizedString("StudentInfo.actions", bundle: bundle, comment: "")
      }

      /// en translation: День рождения
      ///
      /// Locales: en
      public static func profileBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.birthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.birthday"
        }

        return NSLocalizedString("Profile.birthday", bundle: bundle, comment: "")
      }

      /// en translation: Дети %@ уровня
      ///
      /// Locales: en
      public static func filterLevel(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Filter.level", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.level"
        }

        let format = NSLocalizedString("Filter.level", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Дети окончившие учебу
      ///
      /// Locales: en
      public static func filterEnded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.ended", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.ended"
        }

        return NSLocalizedString("Filter.ended", bundle: bundle, comment: "")
      }

      /// en translation: Дни рождения
      ///
      /// Locales: en
      public static func adminPanelBirthdays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.birthdays", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.birthdays"
        }

        return NSLocalizedString("AdminPanel.birthdays", bundle: bundle, comment: "")
      }

      /// en translation: Дни рождения
      ///
      /// Locales: en
      public static func birthdaysTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdays.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdays.title"
        }

        return NSLocalizedString("Birthdays.title", bundle: bundle, comment: "")
      }

      /// en translation: Добавить  урок
      ///
      /// Locales: en
      public static func studentInfoSendLesson(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.sendLesson", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.sendLesson"
        }

        return NSLocalizedString("StudentInfo.sendLesson", bundle: bundle, comment: "")
      }

      /// en translation: Добавить  урок и баллы
      ///
      /// Locales: en
      public static func studentInfoAddMarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.addMarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.addMarks"
        }

        return NSLocalizedString("StudentInfo.addMarks", bundle: bundle, comment: "")
      }

      /// en translation: Добавить "Без типа"
      ///
      /// Locales: en
      public static func selectStudentsAddNoType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.addNoType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.addNoType"
        }

        return NSLocalizedString("SelectStudents.addNoType", bundle: bundle, comment: "")
      }

      /// en translation: Добавить урок
      ///
      /// Locales: en
      public static func selectStudentsAddLessonStudent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.addLessonStudent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.addLessonStudent"
        }

        return NSLocalizedString("SelectStudents.addLessonStudent", bundle: bundle, comment: "")
      }

      /// en translation: Добавить урок всем
      ///
      /// Locales: en
      public static func selectStudentsAddLessonAllStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.addLessonAllStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.addLessonAllStudents"
        }

        return NSLocalizedString("SelectStudents.addLessonAllStudents", bundle: bundle, comment: "")
      }

      /// en translation: Добавление новых учеников
      ///
      /// Locales: en
      public static func adminPanelAddNewStudent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.addNewStudent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.addNewStudent"
        }

        return NSLocalizedString("AdminPanel.addNewStudent", bundle: bundle, comment: "")
      }

      /// en translation: Домашний номер телефона
      ///
      /// Locales: en
      public static func studentInfoHomePhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.homePhoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.homePhoneNumber"
        }

        return NSLocalizedString("StudentInfo.homePhoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Домашний телефон
      ///
      /// Locales: en
      public static func profileHomePhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.homePhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.homePhone"
        }

        return NSLocalizedString("Profile.homePhone", bundle: bundle, comment: "")
      }

      /// en translation: Доступные принтеры
      ///
      /// Locales: en
      public static func adminPanelPrinters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.printers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.printers"
        }

        return NSLocalizedString("AdminPanel.printers", bundle: bundle, comment: "")
      }

      /// en translation: Другие:
      ///
      /// Locales: en
      public static func selectMarkTypesOther(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectMarkTypes.other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectMarkTypes.other"
        }

        return NSLocalizedString("SelectMarkTypes.other", bundle: bundle, comment: "")
      }

      /// en translation: Другое
      ///
      /// Locales: en
      public static func adminPanelOther(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.other"
        }

        return NSLocalizedString("AdminPanel.other", bundle: bundle, comment: "")
      }

      /// en translation: Другое
      ///
      /// Locales: en
      public static func profileOther(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.other"
        }

        return NSLocalizedString("Profile.other", bundle: bundle, comment: "")
      }

      /// en translation: Ежемесячная работа
      ///
      /// Locales: en
      public static func adminPanelEveryMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.everyMonth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.everyMonth"
        }

        return NSLocalizedString("AdminPanel.everyMonth", bundle: bundle, comment: "")
      }

      /// en translation: Есть
      ///
      /// Locales: en
      public static func commonHas(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.has", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.has"
        }

        return NSLocalizedString("Common.has", bundle: bundle, comment: "")
      }

      /// en translation: Закрыть
      ///
      /// Locales: en
      public static func printLabelClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PrintLabel.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PrintLabel.close"
        }

        return NSLocalizedString("PrintLabel.close", bundle: bundle, comment: "")
      }

      /// en translation: Заметка
      ///
      /// Locales: en
      public static func studentInfoNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.note"
        }

        return NSLocalizedString("StudentInfo.note", bundle: bundle, comment: "")
      }

      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static func adminPanelInactiveToActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.inactiveToActive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.inactiveToActive"
        }

        return NSLocalizedString("AdminPanel.inactiveToActive", bundle: bundle, comment: "")
      }

      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static func inactiveActiveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InactiveActive.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InactiveActive.title"
        }

        return NSLocalizedString("InactiveActive.title", bundle: bundle, comment: "")
      }

      /// en translation: Из неактивных в активные
      ///
      /// Locales: en
      public static func wrongLevelsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongLevels.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongLevels.title"
        }

        return NSLocalizedString("WrongLevels.title", bundle: bundle, comment: "")
      }

      /// en translation: Из преактивных в активные
      ///
      /// Locales: en
      public static func adminPanelPreactiveToActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.preactiveToActive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.preactiveToActive"
        }

        return NSLocalizedString("AdminPanel.preactiveToActive", bundle: bundle, comment: "")
      }

      /// en translation: Из преактивных в активные
      ///
      /// Locales: en
      public static func preactiveActiveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PreactiveActive.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PreactiveActive.title"
        }

        return NSLocalizedString("PreactiveActive.title", bundle: bundle, comment: "")
      }

      /// en translation: Из преактивных в неактивные
      ///
      /// Locales: en
      public static func adminPanelPreactiveToInactive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.preactiveToInactive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.preactiveToInactive"
        }

        return NSLocalizedString("AdminPanel.preactiveToInactive", bundle: bundle, comment: "")
      }

      /// en translation: Изменить
      ///
      /// Locales: en
      public static func wrongLevelsIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongLevels.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongLevels.issue"
        }

        return NSLocalizedString("WrongLevels.issue", bundle: bundle, comment: "")
      }

      /// en translation: Изменить  аккаунт
      ///
      /// Locales: en
      public static func profileChangeAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.changeAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.changeAccount"
        }

        return NSLocalizedString("Profile.changeAccount", bundle: bundle, comment: "")
      }

      /// en translation: Имя
      ///
      /// Locales: en
      public static func dataTableName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.name"
        }

        return NSLocalizedString("DataTable.name", bundle: bundle, comment: "")
      }

      /// en translation: Индекс
      ///
      /// Locales: en
      public static func dataTableIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.index", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.index"
        }

        return NSLocalizedString("DataTable.index", bundle: bundle, comment: "")
      }

      /// en translation: Индекс
      ///
      /// Locales: en
      public static func profileIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.index", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.index"
        }

        return NSLocalizedString("Profile.index", bundle: bundle, comment: "")
      }

      /// en translation: Индекс
      ///
      /// Locales: en
      public static func studentInfoIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.index", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.index"
        }

        return NSLocalizedString("StudentInfo.index", bundle: bundle, comment: "")
      }

      /// en translation: Инструктор не найден
      ///
      /// Locales: en
      public static func profileNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.notFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.notFound"
        }

        return NSLocalizedString("Profile.notFound", bundle: bundle, comment: "")
      }

      /// en translation: Инструктор по переписке
      ///
      /// Locales: en
      public static func studentInfoLetterInstructor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.letterInstructor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.letterInstructor"
        }

        return NSLocalizedString("StudentInfo.letterInstructor", bundle: bundle, comment: "")
      }

      /// en translation: Информация об учебе
      ///
      /// Locales: en
      public static func studentInfoInfoAboutStudy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.infoAboutStudy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.infoAboutStudy"
        }

        return NSLocalizedString("StudentInfo.infoAboutStudy", bundle: bundle, comment: "")
      }

      /// en translation: Кем приглашен
      ///
      /// Locales: en
      public static func studentInfoInvitedBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.invitedBy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.invitedBy"
        }

        return NSLocalizedString("StudentInfo.invitedBy", bundle: bundle, comment: "")
      }

      /// en translation: Количество
      ///
      /// Locales: en
      public static func studentInfoCount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.count"
        }

        return NSLocalizedString("StudentInfo.count", bundle: bundle, comment: "")
      }

      /// en translation: Личная информация
      ///
      /// Locales: en
      public static func profilePersonalInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.personalInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.personalInfo"
        }

        return NSLocalizedString("Profile.personalInfo", bundle: bundle, comment: "")
      }

      /// en translation: Личная информация
      ///
      /// Locales: en
      public static func studentInfoPersonalInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.personalInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.personalInfo"
        }

        return NSLocalizedString("StudentInfo.personalInfo", bundle: bundle, comment: "")
      }

      /// en translation: Логи
      ///
      /// Locales: en
      public static func adminPanelLoggers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.loggers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.loggers"
        }

        return NSLocalizedString("AdminPanel.loggers", bundle: bundle, comment: "")
      }

      /// en translation: Логин
      ///
      /// Locales: en
      public static func authLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.login"
        }

        return NSLocalizedString("Auth.login", bundle: bundle, comment: "")
      }

      /// en translation: Логин
      ///
      /// Locales: en
      public static func dataTableLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.login"
        }

        return NSLocalizedString("DataTable.login", bundle: bundle, comment: "")
      }

      /// en translation: МИНУС
      ///
      /// Locales: en
      public static func awardMinus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Award.minus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Award.minus"
        }

        return NSLocalizedString("Award.minus", bundle: bundle, comment: "")
      }

      /// en translation: Магазин
      ///
      /// Locales: en
      public static func adminPanelShop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.shop"
        }

        return NSLocalizedString("AdminPanel.shop", bundle: bundle, comment: "")
      }

      /// en translation: Магазин
      ///
      /// Locales: en
      public static func tabsShop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.shop"
        }

        return NSLocalizedString("Tabs.shop", bundle: bundle, comment: "")
      }

      /// en translation: Мобильный номер телефона
      ///
      /// Locales: en
      public static func studentInfoMobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.mobileNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.mobileNumber"
        }

        return NSLocalizedString("StudentInfo.mobileNumber", bundle: bundle, comment: "")
      }

      /// en translation: Мобильный телефон
      ///
      /// Locales: en
      public static func profileMobilePhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.mobilePhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.mobilePhone"
        }

        return NSLocalizedString("Profile.mobilePhone", bundle: bundle, comment: "")
      }

      /// en translation: Наименование
      ///
      /// Locales: en
      public static func studentInfoNaming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.naming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.naming"
        }

        return NSLocalizedString("StudentInfo.naming", bundle: bundle, comment: "")
      }

      /// en translation: Найденные принтеры:
      ///
      /// Locales: en
      public static func printersSeachedPrinters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.seachedPrinters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.seachedPrinters"
        }

        return NSLocalizedString("Printers.seachedPrinters", bundle: bundle, comment: "")
      }

      /// en translation: Напечатать
      ///
      /// Locales: en
      public static func selectStudentsPrint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.print", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.print"
        }

        return NSLocalizedString("SelectStudents.print", bundle: bundle, comment: "")
      }

      /// en translation: Напиши нам
      ///
      /// Locales: en
      public static func authWriteToUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.writeToUs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.writeToUs"
        }

        return NSLocalizedString("Auth.writeToUs", bundle: bundle, comment: "")
      }

      /// en translation: Настройки
      ///
      /// Locales: en
      public static func adminPanelPreferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.preferences"
        }

        return NSLocalizedString("AdminPanel.preferences", bundle: bundle, comment: "")
      }

      /// en translation: Не активные дети
      ///
      /// Locales: en
      public static func filterInactive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.inactive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.inactive"
        }

        return NSLocalizedString("Filter.inactive", bundle: bundle, comment: "")
      }

      /// en translation: Не выбран принтер, пожалуйста, выберите принтер в списке доступных устройств
      ///
      /// Locales: en
      public static func errorsSelectPrinter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.selectPrinter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.selectPrinter"
        }

        return NSLocalizedString("Errors.selectPrinter", bundle: bundle, comment: "")
      }

      /// en translation: Не выполнил
      ///
      /// Locales: en
      public static func commonNotCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.notCompleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.notCompleted"
        }

        return NSLocalizedString("Common.notCompleted", bundle: bundle, comment: "")
      }

      /// en translation: Неверно введен логин, пожалуйста, проверьте введенные данные
      ///
      /// Locales: en
      public static func errorsInvalidLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.invalidLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.invalidLogin"
        }

        return NSLocalizedString("Errors.invalidLogin", bundle: bundle, comment: "")
      }

      /// en translation: Неверно введен пароль, пожалуйста, проверьте введенные данные
      ///
      /// Locales: en
      public static func errorsInvalidPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.invalidPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.invalidPassword"
        }

        return NSLocalizedString("Errors.invalidPassword", bundle: bundle, comment: "")
      }

      /// en translation: Неизвесная ошибка
      ///
      /// Locales: en
      public static func errorsUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.unknown"
        }

        return NSLocalizedString("Errors.unknown", bundle: bundle, comment: "")
      }

      /// en translation: Неопределенные студенты
      ///
      /// Locales: en
      public static func adminPanelUndefinedStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.undefinedStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.undefinedStudents"
        }

        return NSLocalizedString("AdminPanel.undefinedStudents", bundle: bundle, comment: "")
      }

      /// en translation: Несовпадение уровня и возраста
      ///
      /// Locales: en
      public static func adminPanelWrondLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.wrondLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.wrondLevel"
        }

        return NSLocalizedString("AdminPanel.wrondLevel", bundle: bundle, comment: "")
      }

      /// en translation: Нет
      ///
      /// Locales: en
      public static func commonNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.no"
        }

        return NSLocalizedString("Common.no", bundle: bundle, comment: "")
      }

      /// en translation: Нету
      ///
      /// Locales: en
      public static func commonHasNot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.hasNot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.hasNot"
        }

        return NSLocalizedString("Common.hasNot", bundle: bundle, comment: "")
      }

      /// en translation: Новости
      ///
      /// Locales: en
      public static func tabsNews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.news", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.news"
        }

        return NSLocalizedString("Tabs.news", bundle: bundle, comment: "")
      }

      /// en translation: Новые дети
      ///
      /// Locales: en
      public static func filterNew(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.new", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.new"
        }

        return NSLocalizedString("Filter.new", bundle: bundle, comment: "")
      }

      /// en translation: Новые студенты
      ///
      /// Locales: en
      public static func dataTableAllNewStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.allNewStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.allNewStudents"
        }

        return NSLocalizedString("DataTable.allNewStudents", bundle: bundle, comment: "")
      }

      /// en translation: Номер дома
      ///
      /// Locales: en
      public static func dataTableHouseNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.houseNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.houseNumber"
        }

        return NSLocalizedString("DataTable.houseNumber", bundle: bundle, comment: "")
      }

      /// en translation: Номер дома
      ///
      /// Locales: en
      public static func profileHouseNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.houseNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.houseNumber"
        }

        return NSLocalizedString("Profile.houseNumber", bundle: bundle, comment: "")
      }

      /// en translation: Номер дома
      ///
      /// Locales: en
      public static func studentInfoNumberOfHouse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.numberOfHouse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.numberOfHouse"
        }

        return NSLocalizedString("StudentInfo.numberOfHouse", bundle: bundle, comment: "")
      }

      /// en translation: ОТПРАВКУ ВОВРЕМЯ
      ///
      /// Locales: en
      public static func awardTimelySending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Award.timelySending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Award.timelySending"
        }

        return NSLocalizedString("Award.timelySending", bundle: bundle, comment: "")
      }

      /// en translation: Область
      ///
      /// Locales: en
      public static func dataTableRegion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.region", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.region"
        }

        return NSLocalizedString("DataTable.region", bundle: bundle, comment: "")
      }

      /// en translation: Область
      ///
      /// Locales: en
      public static func profileRegion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.region", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.region"
        }

        return NSLocalizedString("Profile.region", bundle: bundle, comment: "")
      }

      /// en translation: Область
      ///
      /// Locales: en
      public static func studentInfoRegion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.region", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.region"
        }

        return NSLocalizedString("StudentInfo.region", bundle: bundle, comment: "")
      }

      /// en translation: Обновить
      ///
      /// Locales: en
      public static func printersReload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.reload", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.reload"
        }

        return NSLocalizedString("Printers.reload", bundle: bundle, comment: "")
      }

      /// en translation: Ожидаемый уровень
      ///
      /// Locales: en
      public static func wrongLevelsLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongLevels.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongLevels.label"
        }

        return NSLocalizedString("WrongLevels.label", bundle: bundle, comment: "")
      }

      /// en translation: Отмена
      ///
      /// Locales: en
      public static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.cancel"
        }

        return NSLocalizedString("Common.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Отправка уроков
      ///
      /// Locales: en
      public static func adminPanelSendLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.sendLessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.sendLessons"
        }

        return NSLocalizedString("AdminPanel.sendLessons", bundle: bundle, comment: "")
      }

      /// en translation: Отсуствует ID пользователя, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static func errorsAbsentUserId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.absentUserId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.absentUserId"
        }

        return NSLocalizedString("Errors.absentUserId", bundle: bundle, comment: "")
      }

      /// en translation: Отсуствует ID школы, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static func errorsAbsentSchoolId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.absentSchoolId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.absentSchoolId"
        }

        return NSLocalizedString("Errors.absentSchoolId", bundle: bundle, comment: "")
      }

      /// en translation: Отсуствует инструктор, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static func errorsAbsentInstructor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.absentInstructor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.absentInstructor"
        }

        return NSLocalizedString("Errors.absentInstructor", bundle: bundle, comment: "")
      }

      /// en translation: Отсуствует пользователь, пожалуйста, перезапустите приложение
      ///
      /// Locales: en
      public static func errorsAbsentUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.absentUser", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.absentUser"
        }

        return NSLocalizedString("Errors.absentUser", bundle: bundle, comment: "")
      }

      /// en translation: Отсуствуют параметры, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static func errorsEmptyParams(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.emptyParams", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.emptyParams"
        }

        return NSLocalizedString("Errors.emptyParams", bundle: bundle, comment: "")
      }

      /// en translation: Отчество
      ///
      /// Locales: en
      public static func dataTableMiddleName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.middleName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.middleName"
        }

        return NSLocalizedString("DataTable.middleName", bundle: bundle, comment: "")
      }

      /// en translation: Оформить
      ///
      /// Locales: en
      public static func adminPanelIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.issue"
        }

        return NSLocalizedString("AdminPanel.issue", bundle: bundle, comment: "")
      }

      /// en translation: Оформить
      ///
      /// Locales: en
      public static func hightNoticesIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HightNotices.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HightNotices.issue"
        }

        return NSLocalizedString("HightNotices.issue", bundle: bundle, comment: "")
      }

      /// en translation: Оформить
      ///
      /// Locales: en
      public static func inactiveActiveIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InactiveActive.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InactiveActive.issue"
        }

        return NSLocalizedString("InactiveActive.issue", bundle: bundle, comment: "")
      }

      /// en translation: Оформить
      ///
      /// Locales: en
      public static func preactiveActiveIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PreactiveActive.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PreactiveActive.issue"
        }

        return NSLocalizedString("PreactiveActive.issue", bundle: bundle, comment: "")
      }

      /// en translation: Оформить
      ///
      /// Locales: en
      public static func preactiveInactiveIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PreactiveInactive.issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PreactiveInactive.issue"
        }

        return NSLocalizedString("PreactiveInactive.issue", bundle: bundle, comment: "")
      }

      /// en translation: Ошибка
      ///
      /// Locales: en
      public static func commonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.error"
        }

        return NSLocalizedString("Common.error", bundle: bundle, comment: "")
      }

      /// en translation: Ошибка на сервере, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static func errorsServer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.server", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.server"
        }

        return NSLocalizedString("Errors.server", bundle: bundle, comment: "")
      }

      /// en translation: ПЛЮС
      ///
      /// Locales: en
      public static func awardPlus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Award.plus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Award.plus"
        }

        return NSLocalizedString("Award.plus", bundle: bundle, comment: "")
      }

      /// en translation: ПОЗДНЮЮ ОТПРАВКУ
      ///
      /// Locales: en
      public static func awardLateSending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Award.lateSending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Award.lateSending"
        }

        return NSLocalizedString("Award.lateSending", bundle: bundle, comment: "")
      }

      /// en translation: Пароль
      ///
      /// Locales: en
      public static func authPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.password"
        }

        return NSLocalizedString("Auth.password", bundle: bundle, comment: "")
      }

      /// en translation: Пароль
      ///
      /// Locales: en
      public static func dataTablePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.password"
        }

        return NSLocalizedString("DataTable.password", bundle: bundle, comment: "")
      }

      /// en translation: Перевод на взрослые курсы
      ///
      /// Locales: en
      public static func adminPanelEndSchool(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.endSchool", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.endSchool"
        }

        return NSLocalizedString("AdminPanel.endSchool", bundle: bundle, comment: "")
      }

      /// en translation: Перекачать  студентов из базы
      ///
      /// Locales: en
      public static func studentsReloadStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.reloadStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.reloadStudents"
        }

        return NSLocalizedString("Students.reloadStudents", bundle: bundle, comment: "")
      }

      /// en translation: Печать  адреса
      ///
      /// Locales: en
      public static func studentInfoPrintAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.printAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.printAddress"
        }

        return NSLocalizedString("StudentInfo.printAddress", bundle: bundle, comment: "")
      }

      /// en translation: Печать  чека
      ///
      /// Locales: en
      public static func studentInfoPrintCheck(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.printCheck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.printCheck"
        }

        return NSLocalizedString("StudentInfo.printCheck", bundle: bundle, comment: "")
      }

      /// en translation: Печать чеков
      ///
      /// Locales: en
      public static func adminPanelPrintCheck(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.printCheck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.printCheck"
        }

        return NSLocalizedString("AdminPanel.printCheck", bundle: bundle, comment: "")
      }

      /// en translation: Печать этикетки
      ///
      /// Locales: en
      public static func adminPanelPrintLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.printLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.printLabel"
        }

        return NSLocalizedString("AdminPanel.printLabel", bundle: bundle, comment: "")
      }

      /// en translation: Платежи
      ///
      /// Locales: en
      public static func studentInfoPayments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.payments"
        }

        return NSLocalizedString("StudentInfo.payments", bundle: bundle, comment: "")
      }

      /// en translation: Подарки
      ///
      /// Locales: en
      public static func tabsGifts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.gifts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.gifts"
        }

        return NSLocalizedString("Tabs.gifts", bundle: bundle, comment: "")
      }

      /// en translation: Позвать друга
      ///
      /// Locales: en
      public static func profileInvite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.invite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.invite"
        }

        return NSLocalizedString("Profile.invite", bundle: bundle, comment: "")
      }

      /// en translation: Поиск  по QR коду
      ///
      /// Locales: en
      public static func studentsSearchByQR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.searchByQR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.searchByQR"
        }

        return NSLocalizedString("Students.searchByQR", bundle: bundle, comment: "")
      }

      /// en translation: Показать  логин
      ///
      /// Locales: en
      public static func studentInfoShowLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.showLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.showLogin"
        }

        return NSLocalizedString("StudentInfo.showLogin", bundle: bundle, comment: "")
      }

      /// en translation: Покупки
      ///
      /// Locales: en
      public static func adminPanelPurchases(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.purchases", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.purchases"
        }

        return NSLocalizedString("AdminPanel.purchases", bundle: bundle, comment: "")
      }

      /// en translation: Покупки
      ///
      /// Locales: en
      public static func studentInfoPurchases(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.purchases", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.purchases"
        }

        return NSLocalizedString("StudentInfo.purchases", bundle: bundle, comment: "")
      }

      /// en translation: Почтадоллары
      ///
      /// Locales: en
      public static func profileAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.amount"
        }

        return NSLocalizedString("Profile.amount", bundle: bundle, comment: "")
      }

      /// en translation: Преактивные дети
      ///
      /// Locales: en
      public static func filterPreactive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter.preactive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter.preactive"
        }

        return NSLocalizedString("Filter.preactive", bundle: bundle, comment: "")
      }

      /// en translation: Предупреждения
      ///
      /// Locales: en
      public static func studentInfoNotices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.notices", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.notices"
        }

        return NSLocalizedString("StudentInfo.notices", bundle: bundle, comment: "")
      }

      /// en translation: Проблема с ответом от сервера, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static func errorsResultData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.resultData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.resultData"
        }

        return NSLocalizedString("Errors.resultData", bundle: bundle, comment: "")
      }

      /// en translation: Проблема с подключением к принтеру, пожалуйста, обратитесь к разработчику
      ///
      /// Locales: en
      public static func errorsOpenPort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.openPort", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.openPort"
        }

        return NSLocalizedString("Errors.openPort", bundle: bundle, comment: "")
      }

      /// en translation: Проблемы с экспортом XLSX, обратитесь к разработчику
      ///
      /// Locales: en
      public static func errorsExportCSV(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.exportCSV", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.exportCSV"
        }

        return NSLocalizedString("Errors.exportCSV", bundle: bundle, comment: "")
      }

      /// en translation: Проблемы со входом?
      ///
      /// Locales: en
      public static func authProblemsLoggingIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.problemsLoggingIn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.problemsLoggingIn"
        }

        return NSLocalizedString("Auth.problemsLoggingIn", bundle: bundle, comment: "")
      }

      /// en translation: Проверка дубликатов
      ///
      /// Locales: en
      public static func adminPanelDublicates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.dublicates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.dublicates"
        }

        return NSLocalizedString("AdminPanel.dublicates", bundle: bundle, comment: "")
      }

      /// en translation: Производить поиск подключенных принтеров по:
      ///
      /// Locales: en
      public static func printersSearchPrintersIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.searchPrintersIn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.searchPrintersIn"
        }

        return NSLocalizedString("Printers.searchPrintersIn", bundle: bundle, comment: "")
      }

      /// en translation: Профиль
      ///
      /// Locales: en
      public static func profileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.title"
        }

        return NSLocalizedString("Profile.title", bundle: bundle, comment: "")
      }

      /// en translation: Профиль
      ///
      /// Locales: en
      public static func tabsProfileAdmin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.profileAdmin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.profileAdmin"
        }

        return NSLocalizedString("Tabs.profileAdmin", bundle: bundle, comment: "")
      }

      /// en translation: Профиль
      ///
      /// Locales: en
      public static func tabsProfileStudent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.profileStudent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.profileStudent"
        }

        return NSLocalizedString("Tabs.profileStudent", bundle: bundle, comment: "")
      }

      /// en translation: Разрешение родителей
      ///
      /// Locales: en
      public static func studentInfoParentalPermission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.parentalPermission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.parentalPermission"
        }

        return NSLocalizedString("StudentInfo.parentalPermission", bundle: bundle, comment: "")
      }

      /// en translation: Район
      ///
      /// Locales: en
      public static func dataTableArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.area"
        }

        return NSLocalizedString("DataTable.area", bundle: bundle, comment: "")
      }

      /// en translation: Район
      ///
      /// Locales: en
      public static func profileArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.area"
        }

        return NSLocalizedString("Profile.area", bundle: bundle, comment: "")
      }

      /// en translation: Район
      ///
      /// Locales: en
      public static func studentInfoArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.area"
        }

        return NSLocalizedString("StudentInfo.area", bundle: bundle, comment: "")
      }

      /// en translation: Регистрация
      ///
      /// Locales: en
      public static func authRegistration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.registration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.registration"
        }

        return NSLocalizedString("Auth.registration", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  инструктора по переписке
      ///
      /// Locales: en
      public static func studentInfoEditInstructor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editInstructor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editInstructor"
        }

        return NSLocalizedString("StudentInfo.editInstructor", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  пароль
      ///
      /// Locales: en
      public static func studentInfoEditPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editPassword"
        }

        return NSLocalizedString("StudentInfo.editPassword", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  профиль
      ///
      /// Locales: en
      public static func profileEditProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.editProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.editProfile"
        }

        return NSLocalizedString("Profile.editProfile", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  профиль
      ///
      /// Locales: en
      public static func studentInfoEditProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editProfile"
        }

        return NSLocalizedString("StudentInfo.editProfile", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  статус
      ///
      /// Locales: en
      public static func studentInfoEditStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editStatus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editStatus"
        }

        return NSLocalizedString("StudentInfo.editStatus", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  уровень
      ///
      /// Locales: en
      public static func studentInfoEditLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editLevel"
        }

        return NSLocalizedString("StudentInfo.editLevel", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  церковь
      ///
      /// Locales: en
      public static func studentInfoEditChurch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editChurch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editChurch"
        }

        return NSLocalizedString("StudentInfo.editChurch", bundle: bundle, comment: "")
      }

      /// en translation: Редактировать  школу
      ///
      /// Locales: en
      public static func studentInfoEditSchool(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.editSchool", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.editSchool"
        }

        return NSLocalizedString("StudentInfo.editSchool", bundle: bundle, comment: "")
      }

      /// en translation: С возвращением!
      ///
      /// Locales: en
      public static func authWelcomeBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.welcomeBack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.welcomeBack"
        }

        return NSLocalizedString("Auth.welcomeBack", bundle: bundle, comment: "")
      }

      /// en translation: Следующий
      ///
      /// Locales: en
      public static func dataTableNextLesson(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.nextLesson", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.nextLesson"
        }

        return NSLocalizedString("DataTable.nextLesson", bundle: bundle, comment: "")
      }

      /// en translation: Список подарков
      ///
      /// Locales: en
      public static func adminPanelGifts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.gifts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.gifts"
        }

        return NSLocalizedString("AdminPanel.gifts", bundle: bundle, comment: "")
      }

      /// en translation: Список студентов пустой, выберите студентов
      ///
      /// Locales: en
      public static func errorsEmptyStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Errors.emptyStudents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Errors.emptyStudents"
        }

        return NSLocalizedString("Errors.emptyStudents", bundle: bundle, comment: "")
      }

      /// en translation: Статистика
      ///
      /// Locales: en
      public static func adminPanelStatistics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.statistics", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.statistics"
        }

        return NSLocalizedString("AdminPanel.statistics", bundle: bundle, comment: "")
      }

      /// en translation: Статус
      ///
      /// Locales: en
      public static func dataTableStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.status"
        }

        return NSLocalizedString("DataTable.status", bundle: bundle, comment: "")
      }

      /// en translation: Статус
      ///
      /// Locales: en
      public static func profileStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.status"
        }

        return NSLocalizedString("Profile.status", bundle: bundle, comment: "")
      }

      /// en translation: Статус
      ///
      /// Locales: en
      public static func studentInfoStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.status"
        }

        return NSLocalizedString("StudentInfo.status", bundle: bundle, comment: "")
      }

      /// en translation: Статус
      ///
      /// Locales: en
      public static func studentsStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.status"
        }

        return NSLocalizedString("Students.status", bundle: bundle, comment: "")
      }

      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static func hightNoticesMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HightNotices.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HightNotices.message"
        }

        return NSLocalizedString("HightNotices.message", bundle: bundle, comment: "")
      }

      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static func inactiveActiveMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InactiveActive.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InactiveActive.message"
        }

        return NSLocalizedString("InactiveActive.message", bundle: bundle, comment: "")
      }

      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static func preactiveActiveMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PreactiveActive.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PreactiveActive.message"
        }

        return NSLocalizedString("PreactiveActive.message", bundle: bundle, comment: "")
      }

      /// en translation: Статус изменен!
      ///
      /// Locales: en
      public static func preactiveInactiveMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PreactiveInactive.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PreactiveInactive.message"
        }

        return NSLocalizedString("PreactiveInactive.message", bundle: bundle, comment: "")
      }

      /// en translation: Статус:
      ///
      /// Locales: en
      public static func selectStudentsStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.status"
        }

        return NSLocalizedString("SelectStudents.status", bundle: bundle, comment: "")
      }

      /// en translation: Стоимость
      ///
      /// Locales: en
      public static func studentInfoPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.price"
        }

        return NSLocalizedString("StudentInfo.price", bundle: bundle, comment: "")
      }

      /// en translation: Страна
      ///
      /// Locales: en
      public static func dataTableCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.country"
        }

        return NSLocalizedString("DataTable.country", bundle: bundle, comment: "")
      }

      /// en translation: Страна
      ///
      /// Locales: en
      public static func profileCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.country"
        }

        return NSLocalizedString("Profile.country", bundle: bundle, comment: "")
      }

      /// en translation: Страна
      ///
      /// Locales: en
      public static func studentInfoCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.country"
        }

        return NSLocalizedString("StudentInfo.country", bundle: bundle, comment: "")
      }

      /// en translation: Студент не найден
      ///
      /// Locales: en
      public static func studentInfoNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.notFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.notFound"
        }

        return NSLocalizedString("StudentInfo.notFound", bundle: bundle, comment: "")
      }

      /// en translation: Студенты
      ///
      /// Locales: en
      public static func tabsStudents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.students", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.students"
        }

        return NSLocalizedString("Tabs.students", bundle: bundle, comment: "")
      }

      /// en translation: Сумма
      ///
      /// Locales: en
      public static func studentInfoSum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.sum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.sum"
        }

        return NSLocalizedString("StudentInfo.sum", bundle: bundle, comment: "")
      }

      /// en translation: Сумма баллов
      ///
      /// Locales: en
      public static func studentInfoSumMarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.sumMarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.sumMarks"
        }

        return NSLocalizedString("StudentInfo.sumMarks", bundle: bundle, comment: "")
      }

      /// en translation: Сформировать таблицу:
      ///
      /// Locales: en
      public static func dataTableSelectAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.selectAction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.selectAction"
        }

        return NSLocalizedString("DataTable.selectAction", bundle: bundle, comment: "")
      }

      /// en translation: Текущая информация
      ///
      /// Locales: en
      public static func studentInfoCurrentInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.currentInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.currentInfo"
        }

        return NSLocalizedString("StudentInfo.currentInfo", bundle: bundle, comment: "")
      }

      /// en translation: Тип
      ///
      /// Locales: en
      public static func studentInfoType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.type"
        }

        return NSLocalizedString("StudentInfo.type", bundle: bundle, comment: "")
      }

      /// en translation: Тип:
      ///
      /// Locales: en
      public static func selectStudentsType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.type"
        }

        return NSLocalizedString("SelectStudents.type", bundle: bundle, comment: "")
      }

      /// en translation: Удалить  ученика из базы
      ///
      /// Locales: en
      public static func studentInfoDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.delete"
        }

        return NSLocalizedString("StudentInfo.delete", bundle: bundle, comment: "")
      }

      /// en translation: Улица
      ///
      /// Locales: en
      public static func dataTableStreet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.street"
        }

        return NSLocalizedString("DataTable.street", bundle: bundle, comment: "")
      }

      /// en translation: Улица
      ///
      /// Locales: en
      public static func profileStreet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.street"
        }

        return NSLocalizedString("Profile.street", bundle: bundle, comment: "")
      }

      /// en translation: Улица
      ///
      /// Locales: en
      public static func studentInfoStreet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.street"
        }

        return NSLocalizedString("StudentInfo.street", bundle: bundle, comment: "")
      }

      /// en translation: Уникальный номер:
      ///
      /// Locales: en
      public static func selectStudentsUniqueNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.uniqueNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.uniqueNumber"
        }

        return NSLocalizedString("SelectStudents.uniqueNumber", bundle: bundle, comment: "")
      }

      /// en translation: Уникальный номер:
      ///
      /// Locales: en
      public static func studentsUniqueNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.uniqueNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.uniqueNumber"
        }

        return NSLocalizedString("Students.uniqueNumber", bundle: bundle, comment: "")
      }

      /// en translation: Уникальный №
      ///
      /// Locales: en
      public static func dataTableUnique(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.unique", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.unique"
        }

        return NSLocalizedString("DataTable.unique", bundle: bundle, comment: "")
      }

      /// en translation: Ур
      ///
      /// Locales: en
      public static func studentInfoLev(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.lev", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.lev"
        }

        return NSLocalizedString("StudentInfo.lev", bundle: bundle, comment: "")
      }

      /// en translation: Уровень
      ///
      /// Locales: en
      public static func dataTableCurrentLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.currentLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.currentLevel"
        }

        return NSLocalizedString("DataTable.currentLevel", bundle: bundle, comment: "")
      }

      /// en translation: Уровень
      ///
      /// Locales: en
      public static func profileLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.level"
        }

        return NSLocalizedString("Profile.level", bundle: bundle, comment: "")
      }

      /// en translation: Уровень
      ///
      /// Locales: en
      public static func studentInfoLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.level"
        }

        return NSLocalizedString("StudentInfo.level", bundle: bundle, comment: "")
      }

      /// en translation: Уровень
      ///
      /// Locales: en
      public static func studentsLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.level"
        }

        return NSLocalizedString("Students.level", bundle: bundle, comment: "")
      }

      /// en translation: Уровень изменен!
      ///
      /// Locales: en
      public static func wrongLevelsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongLevels.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongLevels.message"
        }

        return NSLocalizedString("WrongLevels.message", bundle: bundle, comment: "")
      }

      /// en translation: Уровень типа:
      ///
      /// Locales: en
      public static func selectStudentsLevelType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.levelType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.levelType"
        }

        return NSLocalizedString("SelectStudents.levelType", bundle: bundle, comment: "")
      }

      /// en translation: Урок для добавления
      ///
      /// Locales: en
      public static func selectStudentsLessonToAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.lessonToAdd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.lessonToAdd"
        }

        return NSLocalizedString("SelectStudents.lessonToAdd", bundle: bundle, comment: "")
      }

      /// en translation: Урок текущего месяца
      ///
      /// Locales: en
      public static func dataTableCurrentMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.currentMonth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.currentMonth"
        }

        return NSLocalizedString("DataTable.currentMonth", bundle: bundle, comment: "")
      }

      /// en translation: Уроки
      ///
      /// Locales: en
      public static func studentInfoLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.lessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.lessons"
        }

        return NSLocalizedString("StudentInfo.lessons", bundle: bundle, comment: "")
      }

      /// en translation: Уроки
      ///
      /// Locales: en
      public static func tabsLessons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tabs.lessons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tabs.lessons"
        }

        return NSLocalizedString("Tabs.lessons", bundle: bundle, comment: "")
      }

      /// en translation: Успешно
      ///
      /// Locales: en
      public static func successTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Success.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Success.title"
        }

        return NSLocalizedString("Success.title", bundle: bundle, comment: "")
      }

      /// en translation: Успешно выбран принтер:
      ///
      /// Locales: en
      public static func printersSelectedPrinter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Printers.selectedPrinter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Printers.selectedPrinter"
        }

        return NSLocalizedString("Printers.selectedPrinter", bundle: bundle, comment: "")
      }

      /// en translation: Успешно напечатано
      ///
      /// Locales: en
      public static func printLabelAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PrintLabel.alertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PrintLabel.alertMessage"
        }

        return NSLocalizedString("PrintLabel.alertMessage", bundle: bundle, comment: "")
      }

      /// en translation: ФИО (по возрастанию)
      ///
      /// Locales: en
      public static func sortNameAlphabetically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort.nameAlphabetically", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort.nameAlphabetically"
        }

        return NSLocalizedString("Sort.nameAlphabetically", bundle: bundle, comment: "")
      }

      /// en translation: ФИО (по убыванию)
      ///
      /// Locales: en
      public static func sortNameNonAlphabetically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort.nameNonAlphabetically", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort.nameNonAlphabetically"
        }

        return NSLocalizedString("Sort.nameNonAlphabetically", bundle: bundle, comment: "")
      }

      /// en translation: ФИО или адрес
      ///
      /// Locales: en
      public static func studentsSearchPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Students.searchPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Students.searchPlaceholder"
        }

        return NSLocalizedString("Students.searchPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: ФИО:
      ///
      /// Locales: en
      public static func selectStudentsFullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.fullName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.fullName"
        }

        return NSLocalizedString("SelectStudents.fullName", bundle: bundle, comment: "")
      }

      /// en translation: Фамилия
      ///
      /// Locales: en
      public static func dataTableLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.lastName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.lastName"
        }

        return NSLocalizedString("DataTable.lastName", bundle: bundle, comment: "")
      }

      /// en translation: Формирование таблицы
      ///
      /// Locales: en
      public static func adminPanelDataTable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AdminPanel.dataTable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AdminPanel.dataTable"
        }

        return NSLocalizedString("AdminPanel.dataTable", bundle: bundle, comment: "")
      }

      /// en translation: Церковь
      ///
      /// Locales: en
      public static func studentInfoChurch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.church", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.church"
        }

        return NSLocalizedString("StudentInfo.church", bundle: bundle, comment: "")
      }

      /// en translation: Часть 1
      ///
      /// Locales: en
      public static func dataTablePart1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.part1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.part1"
        }

        return NSLocalizedString("DataTable.part1", bundle: bundle, comment: "")
      }

      /// en translation: Часть 2
      ///
      /// Locales: en
      public static func dataTablePart2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.part2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.part2"
        }

        return NSLocalizedString("DataTable.part2", bundle: bundle, comment: "")
      }

      /// en translation: Часть 3
      ///
      /// Locales: en
      public static func dataTablePart3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataTable.part3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataTable.part3"
        }

        return NSLocalizedString("DataTable.part3", bundle: bundle, comment: "")
      }

      /// en translation: Школа
      ///
      /// Locales: en
      public static func profileSchool(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.school", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.school"
        }

        return NSLocalizedString("Profile.school", bundle: bundle, comment: "")
      }

      /// en translation: Электронная почта
      ///
      /// Locales: en
      public static func profileEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile.email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile.email"
        }

        return NSLocalizedString("Profile.email", bundle: bundle, comment: "")
      }

      /// en translation: Электронная почта
      ///
      /// Locales: en
      public static func studentInfoEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StudentInfo.email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StudentInfo.email"
        }

        return NSLocalizedString("StudentInfo.email", bundle: bundle, comment: "")
      }

      /// en translation: баллов за
      ///
      /// Locales: en
      public static func awardBallsFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Award.ballsFor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Award.ballsFor"
        }

        return NSLocalizedString("Award.ballsFor", bundle: bundle, comment: "")
      }

      /// en translation: лет
      ///
      /// Locales: en
      public static func selectStudentsCountOfYears(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectStudents.countOfYears", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectStudents.countOfYears"
        }

        return NSLocalizedString("SelectStudents.countOfYears", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R {
  fileprivate init() {}
}
